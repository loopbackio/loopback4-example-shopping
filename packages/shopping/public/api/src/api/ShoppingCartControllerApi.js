/**
 * loopback4-example-shopping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ShoppingCart from '../model/ShoppingCart';
import ShoppingCartItem from '../model/ShoppingCartItem';

/**
* ShoppingCartController service.
* @module api/ShoppingCartControllerApi
* @version 1.1.1
*/
export default class ShoppingCartControllerApi {

    /**
    * Constructs a new ShoppingCartControllerApi. 
    * @alias module:api/ShoppingCartControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the shoppingCartControllerAddItem operation.
     * @callback module:api/ShoppingCartControllerApi~shoppingCartControllerAddItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShoppingCart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ShoppingCartItem} opts.shoppingCartItem shopping cart item
     * @param {module:api/ShoppingCartControllerApi~shoppingCartControllerAddItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShoppingCart}
     */
    shoppingCartControllerAddItem(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['shoppingCartItem'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling shoppingCartControllerAddItem");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShoppingCart;
      return this.apiClient.callApi(
        '/shoppingCarts/{userId}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shoppingCartControllerGet operation.
     * @callback module:api/ShoppingCartControllerApi~shoppingCartControllerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShoppingCart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/ShoppingCartControllerApi~shoppingCartControllerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShoppingCart}
     */
    shoppingCartControllerGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling shoppingCartControllerGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShoppingCart;
      return this.apiClient.callApi(
        '/shoppingCarts/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shoppingCartControllerRemove operation.
     * @callback module:api/ShoppingCartControllerApi~shoppingCartControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/ShoppingCartControllerApi~shoppingCartControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shoppingCartControllerRemove(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling shoppingCartControllerRemove");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shoppingCarts/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shoppingCartControllerSet operation.
     * @callback module:api/ShoppingCartControllerApi~shoppingCartControllerSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ShoppingCart} opts.shoppingCart shopping cart
     * @param {module:api/ShoppingCartControllerApi~shoppingCartControllerSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shoppingCartControllerSet(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['shoppingCart'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling shoppingCartControllerSet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shoppingCarts/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
