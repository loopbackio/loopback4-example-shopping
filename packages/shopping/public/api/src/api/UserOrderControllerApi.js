/**
 * loopback4-example-shopping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoopbackCount from '../model/LoopbackCount';
import Order from '../model/Order';

/**
* UserOrderController service.
* @module api/UserOrderControllerApi
* @version 1.1.1
*/
export default class UserOrderControllerApi {

    /**
    * Constructs a new UserOrderControllerApi. 
    * @alias module:api/UserOrderControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userOrderControllerCreateOrder operation.
     * @callback module:api/UserOrderControllerApi~userOrderControllerCreateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Order} opts.order 
     * @param {module:api/UserOrderControllerApi~userOrderControllerCreateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    userOrderControllerCreateOrder(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['order'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userOrderControllerCreateOrder");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/users/{userId}/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userOrderControllerDeleteOrders operation.
     * @callback module:api/UserOrderControllerApi~userOrderControllerDeleteOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoopbackCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.where 
     * @param {module:api/UserOrderControllerApi~userOrderControllerDeleteOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoopbackCount}
     */
    userOrderControllerDeleteOrders(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userOrderControllerDeleteOrders");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoopbackCount;
      return this.apiClient.callApi(
        '/users/{userId}/orders', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userOrderControllerFindOrders operation.
     * @callback module:api/UserOrderControllerApi~userOrderControllerFindOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/UserOrderControllerApi~userOrderControllerFindOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    userOrderControllerFindOrders(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userOrderControllerFindOrders");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Order];
      return this.apiClient.callApi(
        '/users/{userId}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userOrderControllerPatchOrders operation.
     * @callback module:api/UserOrderControllerApi~userOrderControllerPatchOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoopbackCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.where 
     * @param {Object} opts.body 
     * @param {module:api/UserOrderControllerApi~userOrderControllerPatchOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoopbackCount}
     */
    userOrderControllerPatchOrders(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userOrderControllerPatchOrders");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoopbackCount;
      return this.apiClient.callApi(
        '/users/{userId}/orders', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
